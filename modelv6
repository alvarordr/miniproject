#### DAISIE model with mainland speciation and immigration ####
# by Mark Wright and Alvaro Rodriguez
remove(list=ls())
dev.off()
set.seed(23)



#### Parameters ####
# Set starting populations & niche capacities
setpops <- data.frame(B <- 0, E <- 0, M <- 1000, n <- B + E, K <- 100, Kmain <- 1200)

# Set initial rates & adjust total rate per capita
setrates <- data.frame(gamma0 <- 0.01, lambda.c.B0 <- 0.05, lambda.c.E0 <- 0.05, lambda.c.M0 <- 0.05, lambda.a.B0 <- 0.05, mu.B0 <- 0.002, mu.E0 <- 0.002, mu.M0 <- 0.00002)
total.rate <- (M-B)*gamma0 + B*lambda.c.B0 + E*lambda.c.E0 + M*lambda.c.M0 + B*mu.B0 + E*mu.E0 + B*lambda.a.B0 + M*mu.M0

# Define time settings
settime <- data.frame(dt <- as.numeric(rexp(1, rate = total.rate)), t <- -10 + dt)

# Define dataframe for storing all events as they occur
richness <- data.frame(matrix(ncol = 5)) # convert to matrix
colnames(richness) <- cbind("t", "B", "E", "n","M")
row <- 0

# Set phylogenetic table parameters
Bid <- NULL
Eid <- NULL
Mid <- seq(1,1000,1)
ID= Mid #saves all the IDs in the simulation
fatherIDsM=NULL
fatherIDsE=NULL
fatherIDsB=NULL
deadIDs=NULL
assign("number_tables",0,envir = .GlobalEnv)
tables=NULL
assign("sim_number",value = 0,envir = .GlobalEnv)
sim_number <- 1


#### Functions ####
actualize_rates <- function(B,E,M,n,K){#function which changes the probabily of each event depending on B,M and E
  gamma <- max(0,gamma0*(1-(n-M)/K))
  lambda.c.B <- max(0,lambda.c.B0*(1-n/K))
  lambda.c.E <- max(0,lambda.c.E0*(1-n/K))
  lambda.c.M <- max(0,lambda.c.M0*(1-M/Kmain))
  lambda.a.B <- max(0,lambda.a.B0*(1-n/K))
  mu.B <- max(0,mu.B0*B)
  mu.E <- max(0,mu.E0*E)
  mu.M <- max(0,mu.M0*M)
  return(c(gamma, lambda.c.B, lambda.c.E, lambda.a.B, lambda.c.M, mu.B, mu.E, mu.M))
}

tables <- function(option,richness,speciesID,fatherID,sim_number,number_tables) {
  exit=0
  if (option=="new"){
    assign(paste("table_",sim_number,"_", number_tables, sep = ""), matrix(ncol=4,nrow=1,data=c(speciesID,-1,-richness[nrow(richness),1],-1)),envir = .GlobalEnv)  
  }else{
    for (i in 1:number_tables){
      a=eval(parse(text=paste("table_",sim_number,"_",i,sep = "")))
      for (j in 1:nrow(a)){
        if(a[j,1]==fatherID){
          if (option == "add"){
            a=rbind(a, c(speciesID,fatherID,-richness[nrow(richness),1],-1))
            assign(paste("table_",sim_number,"_",i,sep = ""),a,envir = .GlobalEnv)
            exit=1
            break
          }
        }
        if(a[j,1]==speciesID){
          if (option == "die"){
            a[j,4]=-richness[nrow(richness),1]
            assign(paste("table_",sim_number,"_",i,sep = ""),a,envir = .GlobalEnv)
            exit=1
            break
          }else if(option == "update"){###????
            print(paste("table_",sim_number,"_",i,sep = ""))
            substract=-a[j,3]
            #a[1,3]=-richness[nrow(richness),1]
            for(k in j:nrow(a)){
              a[k,3]=a[k,3] - substract
            }
            assign(paste("table_",sim_number,"_",i,sep = ""),a,envir = .GlobalEnv)
            exit=1
            break
          }
        }
      }
      if (exit==1){break}
    }
  }
}

## anagenesis can still happen (not diversity dependent)

#### Simulation ####
simulation <- function(B,E,M,n,K){
  while(t <= 0){
    row <- row + 1
    rates <- actualize_rates(B,E,M,n,K)
    event <- sample(c("immigration", "cladogenesis_B", "cladogenesis_E","cladogenesis_M", "anagenesis", "extinction_B", "extinction_E","extinction_M"), size = 1, replace = T,  prob = rates)
    if(event == "immigration"){
      B <- B + 1
      M <- M - 1
      richness[row,] <- c(t, B, E, n, M)
      #Quit id from Mid vector
      take_id=sample(Mid,1)
      Mid=setdiff(Mid,take_id)
      #Add id to Bid vector
      Bid=c(Bid,take_id)
      #add id to putative fathers in B
      father_id=take_id
      fatherIDsB=c(fatherIDsB,father_id)
      #create a table with the new father's id
      number_tables=number_tables+1
      tables("new",richness,take_id,father_id,sim_number,number_tables)
    } else if (event == "cladogenesis_B" && B>0){
      B <- B - 1
      richness[row,] <- c(t, B, E, n, M)
      #remove id from Bid vector
      take_id=sample(fatherIDsB,1)
      Bid=setdiff(Bid,take_id)
      #take id as a father id for updating tables later
      father_id=take_id
      #remove id from putative fathers in B
      fatherIDsB=setdiff(fatherIDsB,take_id)
      #add extiction date to the table
      tables("die",richness,take_id,father_id,sim_number,number_tables)
      #decide if cladogenesis happens in Mainland or island
      choose <- sample(1:0,1)
      if (choose==0){#island
        E <- E + 2
        #update richness table
        richness[row,] <- c(t, B, E, n, M)
        for (i in 1:2){
          #create new Eid
          take_id=length(ID)+1
          Eid=c(Eid,take_id)
          #update total IDs table
          ID=c(ID,take_id)
          #add row to the table
          tables("add",richness,take_id,father_id,sim_number,number_tables)
        }
      }else{#mainland
        M <- M + 2
        richness[row,] <- c(t, B, E, n, M)
        #update mainland ids
        for (i in 1:2){
          take_id=length(ID)+1
          Mid=c(Mid,take_id)
        }
      }
    } else if (event == "cladogenesis_E" && E>0){
      E <- E + 1
      richness[row,] <- c(t, B, E, n, M)
      #take putative father
      take_id=sample(Eid,size = 1)
      father_id=take_id
      #setdiff(fatherIDsE,father_id)
      Eid=setdiff(Eid,father_id)
      #add extinction date to the father
      tables("die",richness,take_id,father_id,sim_number,number_tables)
      #remove id from putative fathers in E and form Eid
      for (i in 1:2){
        #generate new id
        take_id=length(ID)+1
        #add id to total ids,to Eid and to putative fathers in E id
        Eid=c(Eid,take_id)
        ID=c(ID,take_id)
        #update table
        tables("add",richness,take_id,father_id,sim_number,number_tables)
      }
    } else if (event == "cladogenesis_M"){
      M <- M + 1
      richness[row,] <- c(t, B, E, n, M)
      take_id=length(ID)+1
      Mid=c(Mid,take_id)
      ID=c(ID,take_id)
    } else if (event == "anagenesis" && B>0){
      B <- B - 1
      E <- E + 1
      richness[row,] <- c(t, B, E, n, M)
      #take B id and eliminate from Bid vector
      take_id=sample(Bid,1)
      Bid=setdiff(Bid,take_id)
      #add extiction time
      tables("die",richness,father_id,father_id,sim_number,number_tables)
      #generate an id for new E, add it to Eid and to putative E fathers
      take_id=length(ID)+1
      Eid=c(Eid,take_id)
      ID=c(ID,take_id)
      #tables("update",richness,take_id,father_id,sim_number,number_tables)
    } else if (event == "extinction_B" && B>0){
      B <- B - 1
      richness[row,] <- c(t, B, E, n, M)
      #take a B id and remove it to Bid, and to putative fathers in B
      take_id=sample(Bid,1)
      Bid=setdiff(Bid,take_id)
      fatherIDsB=setdiff(fatherIDsB,take_id)
      #add extinction date to the table
      tables("die",richness,take_id,father_id,sim_number,number_tables)
    } else if (event == "extinction_E"){
      E <- E - 1
      richness[row,] <- c(t, B, E, n, M)
      #take a E id and remove it to Eid, and to putative fathers in E
      take_id=sample(Eid,1)
      Eid=setdiff(Eid,take_id)
      tables("die",richness,take_id,father_id,sim_number,number_tables)
    } else if (event == "extinction_M"){
      M <- M - 1
      richness[row,] <- c(t, B, E, n, M)
      #take a M id and remove it to Mid
      take_id=sample(Mid,1)
      Mid=setdiff(Mid,take_id)
    } ### if species on mainland goes extinct, island version becomes endemic
    n <- B + E ### tweak code to reflect ^^ adjusting state-space
    total.rate <- (M-B)*rates[1] + B*rates[2] + E*rates[3] + M*rates[4] + B*rates[5] + B*rates[6] + E*rates[7] + M*rates[8]
    dt <- as.numeric(rexp(1, rate = total.rate))
    t <- t + dt
  }
  return(richness)
}
richness <- simulation(B,E,M,n,K)
head(richness)



#### Plot the simulation ####
par(mar = c(5,5,2,5))
plot(data = richness, n~t, type = "l", lty = 2, main = "One Simulation", xlab = "Time (mya)", ylab = "Richness")
lines(data = richness, B~t, col = "blue", lwd = 2)
lines(data = richness, E~t, col = "red", lwd = 2)
par(new=T)
plot(data = richness, M~t, type = "l", axes = F, xlab = NA, ylab = NA, col = "green")
axis(4)
mtext(text = "Mainland Richness", side=4, line=3)
for(i in 1:20){abline(h = 500 + i*50, lty = 2, col = "grey")}



#### Replicate the simulation ####
total.sim <- data.frame(matrix(ncol = 5))
colnames(total.sim) <- cbind("t", "B", "E", "n", "M")
for(i in 1:10){
  #for(j in 1:6){ls(B, E, M, n, K, Kmain)[i] <- setpops[,i]}
  setpops <- setpops
  setrates <- setrates
  total.rate <- (M-B)*gamma0 + B*lambda.c.B0 + E*lambda.c.E0 + M*lambda.c.M0 + B*mu.B0 + E*mu.E0 + B*lambda.a.B0 + M*mu.M0
  settime <- settime
  Bid <- NULL
  Eid <- NULL
  Mid <- seq(1,1000,1)
  ID= Mid #saves all the IDs in the simulation
  fatherIDsM=NULL
  fatherIDsE=NULL
  fatherIDsB=NULL
  deadIDs=NULL
  richness <- data.frame(matrix(ncol = 5)) # convert to matrix
  colnames(richness) <- cbind("t", "B", "E", "n","M")
  row <- 1
  assign("number_tables",0,envir = .GlobalEnv)
  assign("sim_number",value = 0,envir = .GlobalEnv)
  richness <- simulation(B,E,M,n,K)
  richness
  total.sim <- rbind(total.sim, richness)
}
total.sim <- total.sim[-1,]
total.sim <- total.sim[order(total.sim$t),]
total.sim$t <- round(total.sim$t, 1)



#### Calculate mean and confidence intervals ####
confid.sim <- data.frame(matrix(ncol = 13, nrow = 101))
colnames(confid.sim) <- c("t", "BHigh", "BMean", "BLow", "EHigh", "EMean", "ELow", "nHigh", "nMean", "nLow", "MHigh", "MMean", "MLow")
confid.sim$t <- seq(-10, 0, 0.1)
for(i in 1:101){
  if(length(total.sim$B[total.sim$t == confid.sim$t[i]]) == 0){
    confid.sim$BHigh[i] <- "NA"
    confid.sim$BMean[i] <- "NA"
    confid.sim$BLow[i] <- "NA"
  } else {
    confid.sim$BHigh[i] <- confint(lm(total.sim$B[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,2]
    confid.sim$BMean[i] <- mean(total.sim$B[total.sim$t == confid.sim$t[i]])
    confid.sim$BLow[i] <- confint(lm(total.sim$B[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,1]
  }
}
for(i in 1:101){
  if(length(total.sim$E[total.sim$t == confid.sim$t[i]]) == 0){
    confid.sim$EHigh[i] <- "NA"
    confid.sim$EMean[i] <- "NA"
    confid.sim$ELow[i] <- "NA"
  } else {
    confid.sim$EHigh[i] <- confint(lm(total.sim$E[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,2]
    confid.sim$EMean[i] <- mean(total.sim$E[total.sim$t == confid.sim$t[i]])
    confid.sim$ELow[i] <- confint(lm(total.sim$E[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,1]
  }
}
for(i in 1:101){
  if(length(total.sim$n[total.sim$t == confid.sim$t[i]]) == 0){
    confid.sim$nHigh[i] <- "NA"
    confid.sim$nMean[i] <- "NA"
    confid.sim$nLow[i] <- "NA"
  } else {
    confid.sim$nHigh[i] <- confint(lm(total.sim$n[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,2]
    confid.sim$nMean[i] <- mean(total.sim$n[total.sim$t == confid.sim$t[i]])
    confid.sim$nLow[i] <- confint(lm(total.sim$n[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,1]
  }
}
for(i in 1:101){
  if(length(total.sim$M[total.sim$t == confid.sim$t[i]]) == 0){
    confid.sim$MHigh[i] <- "NA"
    confid.sim$MMean[i] <- "NA"
    confid.sim$MLow[i] <- "NA"
  } else {
    confid.sim$MHigh[i] <- confint(lm(total.sim$M[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,2]
    confid.sim$MMean[i] <- mean(total.sim$M[total.sim$t == confid.sim$t[i]])
    confid.sim$MLow[i] <- confint(lm(total.sim$M[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,1]
  }
}
confid.sim <- confid.sim[confid.sim$BHigh != "NA",]



#### Plot the replicated simulation averages ####
par(mar = c(5,5,2,5))
plot(data = confid.sim, nMean~t, type = "l", main = "Replicated Simulation", xlab = "Time (mya)", ylab = "Richness", lwd = 2)
lines(data = confid.sim, nHigh~t, col = "darkgrey", lty = 2, lwd = 1)
lines(data = confid.sim, nLow~t, col = "darkgrey", lty = 2, lwd = 1)
lines(data = confid.sim, BMean~t, col = "blue", lwd = 2)
lines(data = confid.sim, BHigh~t, col = "lightblue", lty = 2, lwd = 1)
lines(data = confid.sim, BLow~t, col = "lightblue", lty = 2, lwd = 1)
lines(data = confid.sim, EMean~t, col = "red", lwd = 2)
lines(data = confid.sim, EHigh~t, col = "pink", lty = 2, lwd = 1)
lines(data = confid.sim, ELow~t, col = "pink", lty = 2, lwd = 1)
par(new=T)
plot(data = confid.sim, MMean~t, type = "l", axes = F, xlab = NA, ylab = NA, col = "green", lwd = 2)
lines(data = confid.sim, MHigh~t, col = "limegreen", lty = 2, lwd = 1)
lines(data = confid.sim, MLow~t, col = "limegreen", lty = 2, lwd = 1)
axis(4)
mtext(text = "Mainland Richness", side=4, line=3)
for(i in 1:20){abline(h = 500 + i*50, lty = 2, col = "darkgrey")}





#

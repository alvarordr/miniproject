#### Island biogeography model with mainland dynamics ####
# by Mark Wright and Alvaro Rodriguez
remove(list=ls())
dev.off()
set.seed(23)
#install.packages("DDD", "dplyr", "zoo")
library(dplyr)
library(zoo)
library(DDD)



#### Constants that are not redefined per simulation ####
K <- 100
Kmain <- 1200
gamma0 <- 0.01
lambda.c.B0 <- 0.05
lambda.c.E0 <- 0.05
lambda.c.M0 <- 0.05
lambda.a.B0 <- 0.05
mu.B0 <- 0.002
mu.E0 <- 0.002
mu.M0 <- 0.00002
table.generation <- T



#Starting time & population sizes
t0 <- -10
B0 <- 0
E0 <- 0
n0 <- B0 + E0
M0 <- 1000



#### Define Functions ####
actualize_rates <- function(B,E,M,n){
  gamma <- max(0,gamma0*(1-(n-M)/Kmain))
  gamma2 <- max(0,gamma0*(1-(M-n)/K))
  lambda.c.B <- max(0,lambda.c.B0*(1-n/K))
  lambda.c.E <- max(0,lambda.c.E0*(1-n/K))
  lambda.c.M <- max(0,lambda.c.M0*(1-M/Kmain))
  lambda.a.B <- max(0,lambda.a.B0*(1-n/K))
  mu.B <- max(0,mu.B0*B)
  mu.E <- max(0,mu.E0*E)
  mu.M <- max(0,mu.M0*M)
  return(c(gamma, gamma2, lambda.c.B, lambda.c.E, lambda.a.B, lambda.c.M, mu.B, mu.E, mu.M))
}
if(table.generation){
  tables <- function(option,richness,speciesID,fatherID,sim_number,number_tables) {
    exit=0
    if (option=="new"){
      assign(paste("table_",sim_number,"_", number_tables, sep = ""), matrix(ncol=4,nrow=1,data=c(speciesID,0,-richness[nrow(richness),1],-1)),envir = .GlobalEnv)  
    }else if(option=="add_clau_B"){
      for (i in 1:number_tables){
        a=eval(parse(text=paste("table_",sim_number,"_",i,sep = "")))
        if(a[1,1]==fatherID && a[1,4]==-1){#########################################change
          a=rbind(a, c(speciesID,fatherID,-richness[nrow(richness),1],-1))
          assign(paste("table_",sim_number,"_",i,sep = ""),a,envir = .GlobalEnv)
          break
        }
      }
    }else{
      for (i in 1:number_tables){
        a=eval(parse(text=paste("table_",sim_number,"_",i,sep = "")))
        for (j in 1:nrow(a)){
          if(a[j,1]==fatherID){
            if (option == "add"){
              a=rbind(a, c(speciesID,fatherID,-richness[nrow(richness),1],-1))
              assign(paste("table_",sim_number,"_",i,sep = ""),a,envir = .GlobalEnv)
              exit=1
              break
            }
          }
          if(a[j,1]==speciesID){
            if (option == "die"){
              a[j,4]=-richness[nrow(richness),1]
              assign(paste("table_",sim_number,"_",i,sep = ""),a,envir = .GlobalEnv)
              exit=1
              break
            }else if(option == "update"){
              print(paste("table_",sim_number,"_",i,sep = ""))
              substract=-a[j,3]
              #a[1,3]=-richness[nrow(richness),1]
              for(k in j:nrow(a)){
                a[k,3]=a[k,3] - substract
              }
              assign(paste("table_",sim_number,"_",i,sep = ""),a,envir = .GlobalEnv)
              exit=1
              break
            }
          }
        }
        if (exit==1){break}
      }
    }
  } 
}
plot_cumulative=function(table){
  table=as.data.frame(table)
  colnames(table)=c("id","father_id","appearance","extinction")
  table$appearance=-table$appearance
  table=table[order(table$appearance),]
  table=cbind(table,seq(1,nrow(table),1))
  colnames(table)=c("id","father_id","appearance","extinction","number")
  plot(table$number~table$appearance,pch=19,cex=0.01,xlab="Time",ylab="Number of species",xlim=c(t0,0))
  lines(table$number~table$appearance,type="s")
  last_num=table$number[nrow(table)]
  last_time=table$appearance[nrow(table)]
  segments(x0=last_time,y0=last_num,y1=last_num,x1=0)
}



#### Simulation ####
simulation <- function(B,E,M,sim_number){
  t <- t0
  B <- B0
  E <- E0
  n <- n0
  M <- M0
  richness <- data.frame(matrix(ncol = 5))
  colnames(richness) <- cbind("t", "B", "E", "n","M")
  row <- 0
  if(table.generation){
    Bid <- NULL
    Eid <- NULL
    Mid <- seq(1,1000,1)
    ID <- Mid
    deadIDs <- NULL
    assign("number_tables",0,envir = .GlobalEnv)
    tables=NULL
    assign("sim_number",value = 0,envir = .GlobalEnv)
  }
  while(t <= 0){
    row <- row + 1
    rates <- actualize_rates(B,E,M,n)
    total.rate <- (M-B)*rates[1] + B*rates[2] + E*rates[3] + M*rates[4] + B*rates[5] + B*rates[6] + E*rates[7] + M*rates[8] ####### add migration back to mainland
    dt <- as.numeric(10*rexp(1, rate = total.rate))
    event <- sample2(c("immigration","migration_back", "cladogenesis_B", "cladogenesis_E","cladogenesis_M", "anagenesis_B", "extinction_B", "extinction_E","extinction_M"), size = 1, replace = T,  prob = rates)
    if(event == "immigration"){
      B <- B + 1
      M <- M - 1
      richness[row,] <- c(t, B, E, n, M)
      take_id=sample2(Mid,1)
      Mid=setdiff(Mid,take_id)
      Bid=c(Bid,take_id)
      father_id=take_id
      number_tables=number_tables+1###########
      tables("new",richness,take_id,father_id,sim_number,number_tables)
    }else if(event == "migration_back" && B>0){#####endemic migrating, change!
      B <- B - 1
      M <- M + 1
      take_id=sample2(Bid,1)
      Mid <- c(Mid,take_id)
      Bid=setdiff(Bid,take_id)
      father_id=take_id
      richness[row,] <- c(t, B, E, n, M)
      tables("die",richness,father_id,father_id,sim_number,number_tables)
    } 
    else if (event == "cladogenesis_B" && B>0){
      B <- B - 1###not change
      richness[row,] <- c(t, B, E, n, M)
      father_id=sample2(Bid,1)
      Bid=setdiff(Bid,take_id)
      choose <- sample2(1:0,1)
      if (choose==0){#island
        E <- E + 1#######
        M <- M + 1######nooo
        Mid=c(Mid,father_id)
        richness[row,] <- c(t, B, E, n, M)
        take_id=length(ID)+1
        Eid=c(Eid,take_id)
        ID=c(ID,take_id)
        tables("add_clau_B",richness,take_id,father_id,sim_number,number_tables)
      }else{#mainland
        M <- M + 1###############
        E <- E + 1#####nooo
        Eid=c(Eid,father_id)
        richness[row,] <- c(t, B, E, n, M)
        for (i in 1:2){
          take_id=length(ID)+1
          Mid=c(Mid,take_id)
        }
      }
    } else if (event == "cladogenesis_E" && E>0){
      E <- E + 1
      richness[row,] <- c(t, B, E, n, M)
      father_id=sample2(Eid,size = 1)
      take_id=length(ID)+1
      Eid=c(Eid,take_id)
      ID=c(ID,take_id)
      tables("add",richness,take_id,father_id,sim_number,number_tables)
    } else if (event == "cladogenesis_M"){
      M <- M + 1
      richness[row,] <- c(t, B, E, n, M)
      take_id=length(ID)+1
      Mid=c(Mid,take_id)
      ID=c(ID,take_id)
    } else if (event == "anagenesis_B" && B>0){
      B <- B - 1#####no 
      #E <- E + 1
      #M <- M + 1
      take_id=sample2(Bid,1)
      father_id=take_id
      Bid=setdiff(Bid,take_id)
      choose=sample2(1:0,1)
      if (choose==0){#on island
        E <- E + 1
        take_id=length(ID)+1
        Eid=c(Eid,take_id)
        ID=c(ID,take_id)
      }else if(choose == 1){#on mainland
        M <- M + 1
        Mid=c(Mid,take_id)
        richness[row,] <- c(t, B, E, n, M)
        tables("die",richness,father_id,father_id,sim_number,number_tables)
      }
    } else if (event == "extinction_B" && B>0){
      B <- B - 1
      richness[row,] <- c(t, B, E, n, M)
      take_id=sample2(Bid,1)
      Bid=setdiff(Bid,take_id)
      tables("die",richness,take_id,father_id,sim_number,number_tables)
      choose=sample(1:0,1)
      if (choose==0){#mainland extinction
        E <- E + 1
        Eid=c(Eid,take_id)
      }else if(choose==1){#island extinction
        M <- M + 1
        Mid = c(Mid,take_id)
      }
    } else if (event == "extinction_E"){
      E <- E - 1
      richness[row,] <- c(t, B, E, n, M)
      take_id=sample2(Eid,1)
      Eid=setdiff(Eid,take_id)
      tables("die",richness,take_id,father_id,sim_number,number_tables)
    } else if (event == "extinction_M"){
      M <- M - 1
      richness[row,] <- c(t, B, E, n, M)
      take_id=sample2(Mid,1)
      Mid=setdiff(Mid,take_id)
    }
    n <- B + E
    t <- t + dt
  }
  return(richness)
}







#### Plot the simulation ####
#par(mar = c(5,5,2,5))
#plot(data = richness, n~t, type = "l", lty = 2, main = "One Simulation", xlab = "Time (mya)", ylab = "Richness")
#lines(data = richness, B~t, col = "blue", lwd = 2)
#lines(data = richness, E~t, col = "red", lwd = 2)
#par(new=T)
#plot(data = richness, M~t, type = "l", axes = F, xlab = NA, ylab = NA, col = "green")
#axis(4)
#mtext(text = "Mainland Richness", side=4, line=3)
#for(i in 1:20){abline(h = 500 + i*50, lty = 2, col = "grey")}




sims <- 20
list.sims <- list()
for(i in 1:sims){
  richness <- simulation(B,E,M,i)
  richness
  richness$tab <- c(rep(i,nrow(richness)))
  richness$count <- c(1:nrow(richness))
  name <- paste("richness_",i,sep = "")
  list.sims[[name]] <- richness
}
#### Adding Phylo tables ####

total_simulations <- i
sim=1
table=1
exit_sim=F
total_tables=NULL
total_table_length=0
mean_table_length=NULL
biggest_table_n=0
biggest_table_name=""
biggest_tables=NULL
biggest_tables_nrow=NULL
all_tables=data.frame(id=numeric(0),father_id=numeric(0),appearance=numeric(0),extinction=numeric(0),sim=numeric(0))
colnames(all_tables)=c("id","father_id","appearance","extinction")
while(exit_sim==F){
  if (exists(paste("table_",sim,"_",table,sep = ""))){
    a=eval(parse(text=paste("table_",sim,"_",table,sep = "")))
    total_table_length=total_table_length+nrow(a)
    a=cbind(a,rep(sim,nrow(a)))
    all_tables=rbind(all_tables,a)
    if (nrow(a)>biggest_table_n){
      biggest_table_n=nrow(a)
      biggest_table_name=paste("table_",sim,"_",table,sep = "")
    }
    table=table+1
  }else{
    sim=sim+1
    total_tables=c(total_tables,table)
    mean_table_length=c(mean_table_length,total_table_length/table)
    table=1
    total_table_length=0
    biggest_tables=c(biggest_tables,biggest_table_name)
    biggest_tables_nrow=c(biggest_tables_nrow,biggest_table_n)
    biggest_table_n=0
  }
  if (sim==total_simulations){
    exit_sim=T
  }
}

##compare them with anova or t test, tambien para el numero de n etc

#formatting all_tables
colnames(all_tables)=c("id","father_id","appearance","extinction","simulation")
all_tables$appearance=-all_tables$appearance
all_tables=all_tables[order(all_tables$appearance),]
all_tables=cbind(all_tables,seq(1,nrow(all_tables),1))
colnames(all_tables)=c("id","father_id","appearance","extinction","simulation","number")


##plotting one of the simulations
all_tables=all_tables[all_tables$simulation==1,]
plot(all_tables$number~all_tables$appearance,pch=19,cex=0.01,xlab="Time",ylab="Number of species")
lines(all_tables$number~all_tables$appearance,type="s")

plot_cumulative(all_tables) #### maybe add extinction events
plot_cumulative(table_8_2)

#all_tables$step <- 1
#library(plyr)
#df <- ddply(all_tables,.(id),transform,step=cumsum(step))
#head(df)


##### Replication done correctly this time ####
total.sim <- bind_rows(list.sims)
unique.times <- total.sim[!duplicated(total.sim),]
unique.times[,c(2:5)] <- NA
list.times <- list()
total.times <- NULL
for(i in 1:(sims)){
  unique.times$tab <- i
  name <- paste("times_",i,sep = "")
  list.times[[name]] <- unique.times
}
total.times <- bind_rows(list.times)
### Break point ~ 6.5 mins
total.sim <- rbind(total.sim, total.times)

total.sim <- total.sim[order(total.sim$t, total.sim$tab),]
nrows <- as.numeric(nrow(total.sim[total.sim$t == -10 & is.na(total.sim$B),2:5]))
total.sim[total.sim$t == -10 & is.na(total.sim$B),2:5] <- c(rep(B0,nrows), rep(E0,nrows), rep(n0,nrows), rep(M0,nrows))
total.sim$count <- duplicated(total.sim[,c(1,6)])
total.sim <- total.sim[total.sim$count == FALSE,]
#while(nrow(total.sim[total.sim$t == -10 & is.na(total.sim$B),2:5])){
  #total.sim[total.sim$t == -10 & is.na(total.sim$B),2:5][1,] <- c(B0,E0,n0,M0)
#}
total.sim <- total.sim[order(total.sim$tab, total.sim$t),]
total.sim[2:5] <- na.locf(total.sim[2:5])
#total.sim$count <- !duplicated(total.sim)
#total.sim <- total.sim[-total.sim$count != FALSE,]
total.sim <- total.sim[order(total.sim$t, total.sim$tab),]

### Continue with confidence intervals and medians

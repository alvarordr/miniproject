#### DAISIE model with mainland speciation and immigration ####
# by Mark Wright and Alvaro Rodriguez
remove(list=ls())
set.seed(23)



#### Parameters ####
B <- 0 # number of nonendemic species
E <- 0 # number of endemic species
n <- B + E # number of combined nonendemic and endemic species
K <- 100 
Kmain <- 1200
M <- 1000 # number of mainland species
t <- -10 # present time is now t=0 and perspective is looking backwards in time = t
gamma0 <- 0.005 # rate of immigration
lambda.c.B0 <- 0.02 # rate of cladogenesis
lambda.c.E0 <- 0.04 # rate of cladogenesis
lambda.c.M0 <- 0.05 # rate of cladogenesis
lambda.a.B0 <- 0.02 # rate of anagenesis
mu.B0 <- 0.002 # rate of extinction
mu.E0 <- 0.002 # rate of extinction
mu.M0 <- 0.00002 # rate of extinction
total.rate <- (M-B)*gamma0 + B*lambda.c.B0 + E*lambda.c.E0 + M*lambda.c.M0 + B*mu.B0 + E*mu.E0 + B*lambda.a.B0 + M*mu.M0 # adjusted per capita rates
richness <- data.frame(matrix(ncol = 5)) # convert to matrix
colnames(richness) <- cbind("t", "B", "E", "n", "M")
row <- 1



#### Functions ####
dt <- as.numeric(rexp(1, rate = total.rate))
t <- t + dt # define the time of the first event
actualize_rates <- function(B,E,M,n,K){#function which changes the probabily of each event depending on B,M and E
  gamma <- max(0,gamma0*(1-(n-M)/K))
  lambda.c.B <- max(0,lambda.c.B0*(1-n/K))
  lambda.c.E <- max(0,lambda.c.E0*(1-n/K))
  lambda.c.M <- max(0,lambda.c.M0*(1-M/Kmain))
  lambda.a.B <- max(0,lambda.a.B0*(1-n/K))
  mu.B <- max(0,mu.B0*B)
  mu.E <- max(0,mu.E0*E)
  mu.M <- max(0,mu.M0*M)
  return(c(gamma, lambda.c.B, lambda.c.E, lambda.a.B, lambda.c.M, mu.B, mu.E, mu.M))
}

## anagenesis can still happen (not diversity dependent)

#### Simulation ####
simulation <- function(B,E,M,n,K){while(t <= 0){
  rates <- actualize_rates(B,E,M,n,K)
  total.rate <- (M-B)*rates[1] + B*rates[2] + E*rates[3] + M*rates[4] + B*rates[5] + B*rates[6] + E*rates[7] + M*rates[8]
  event <- sample(c("immigration", "cladogenesis_B", "cladogenesis_E","cladogenesis_M", "anagenesis", "extinction_B", "extinction_E","extinction_M"), size = 1, replace = T,  prob = rates)
  if(event == "immigration" & M >= 1){
    B <- B + 1
    M <- M - 1
  } else if (event == "cladogenesis_B" & B >= 1){
    B <- B - 1
    E <- E + 2
  } else if (event == "cladogenesis_E" & E >= 1){
    E <- E + 1
  } else if (event == "cladogenesis_M" & M >= 1){
    M <- M + 1
  } else if (event == "anagenesis" & B >= 1){
    B <- B - 1
    E <- E + 1
  } else if (event == "extinction_B" & B >= 1){
    B <- B - 1
  } else if (event == "extinction_E" & E >= 1){
    E <- E - 1
  } else if (event == "extinction_M" & M >= 1){
    M <- M - 1
  } ### if species on mainland goes extinct, island version becomes endemic
  n <- B + E ### tweak code to reflect ^^ adjusting state-space
  richness[row,] <- c(t, B, E, n, M)
  row <- row + 1
  dt <- as.numeric(rexp(1, rate = total.rate))
  t <- t + dt
}
  return(richness)
}
richness <- simulation(B,E,M,n,K)
head(richness)



#### Plot the simulation ####
plot(data = richness, n~t, type = "l", lty = 2, main = "One Simulation", xlab = "Time (mya)", ylab = "Richness")
lines(data = richness, B~t, col = "blue", lwd = 2)
lines(data = richness, E~t, col = "red", lwd = 2)
par(new=T)
plot(data = richness, M~t, type = "l", axes = F, xlab = NA, ylab = NA, col = "green")
axis(4)
mtext(text = "Mainland Richness", side=4, line=3)
legend(x = "topleft", legend = c("Total, n", "Both, B", "Endemic, E", "Mainland, M"), text.col = c("black", "blue", "red", "green"))
abline(h = 1000, lty = 2, col = "grey")
abline(h = 950, lty = 2, col = "grey")
abline(h = 900, lty = 2, col = "grey")
abline(h = 850, lty = 2, col = "grey")



#### Replicate the simulation ####
total.sim <- data.frame(matrix(ncol = 5))
colnames(total.sim) <- cbind("t", "B", "E", "n", "M")
for(i in 1:100){
  t <- -10 + dt
  B <- 0
  E <- 0
  M <- 1000
  n <- B + E
  K <- 100
  richness <- data.frame(matrix(ncol = 5)) # convert to matrix
  colnames(richness) <- cbind("t", "B", "E", "n", "M")
  row <- 1
  richness <- simulation(B,E,M,n,K)
  total.sim <- rbind(total.sim, richness)
}
total.sim <- total.sim[-1,]
total.sim <- total.sim[order(total.sim$t),]
total.sim$t <- round(total.sim$t, 1)



#### Calculate mean and confidence intervals ####
confid.sim <- data.frame(matrix(ncol = 13, nrow = 101))
colnames(confid.sim) <- c("t", "BHigh", "BMean", "BLow", "EHigh", "EMean", "ELow", "nHigh", "nMean", "nLow", "MHigh", "MMean", "MLow")
confid.sim$t <- seq(-10, 0, 0.1)
for(i in 1:101){
  if(length(total.sim$B[total.sim$t == confid.sim$t[i]]) == 0){
    confid.sim$BHigh[i] <- "NA"
    confid.sim$BMean[i] <- "NA"
    confid.sim$BLow[i] <- "NA"
  } else {
    confid.sim$BHigh[i] <- confint(lm(total.sim$B[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,2]
    confid.sim$BMean[i] <- mean(total.sim$B[total.sim$t == confid.sim$t[i]])
    confid.sim$BLow[i] <- confint(lm(total.sim$B[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,1]
  }
}
for(i in 1:101){
  if(length(total.sim$E[total.sim$t == confid.sim$t[i]]) == 0){
    confid.sim$EHigh[i] <- "NA"
    confid.sim$EMean[i] <- "NA"
    confid.sim$ELow[i] <- "NA"
  } else {
    confid.sim$EHigh[i] <- confint(lm(total.sim$E[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,2]
    confid.sim$EMean[i] <- mean(total.sim$E[total.sim$t == confid.sim$t[i]])
    confid.sim$ELow[i] <- confint(lm(total.sim$E[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,1]
  }
}
for(i in 1:101){
  if(length(total.sim$n[total.sim$t == confid.sim$t[i]]) == 0){
    confid.sim$nHigh[i] <- "NA"
    confid.sim$nMean[i] <- "NA"
    confid.sim$nLow[i] <- "NA"
  } else {
    confid.sim$nHigh[i] <- confint(lm(total.sim$n[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,2]
    confid.sim$nMean[i] <- mean(total.sim$n[total.sim$t == confid.sim$t[i]])
    confid.sim$nLow[i] <- confint(lm(total.sim$n[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,1]
  }
}
for(i in 1:101){
  if(length(total.sim$M[total.sim$t == confid.sim$t[i]]) == 0){
    confid.sim$MHigh[i] <- "NA"
    confid.sim$MMean[i] <- "NA"
    confid.sim$MLow[i] <- "NA"
  } else {
    confid.sim$MHigh[i] <- confint(lm(total.sim$M[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,2]
    confid.sim$MMean[i] <- mean(total.sim$M[total.sim$t == confid.sim$t[i]])
    confid.sim$MLow[i] <- confint(lm(total.sim$M[total.sim$t == confid.sim$t[i]]~total.sim$t[total.sim$t == confid.sim$t[i]]))[1,1]
  }
}
confid.sim <- confid.sim[confid.sim$BHigh != "NA",]



#### Plot the replicated simulation averages ####
par(mar = c(5,5,2,5))
plot(data = confid.sim, nMean~t, type = "l", main = "Replicated Simulation", xlab = "Time (mya)", ylab = "Richness", lwd = 2)
lines(data = confid.sim, nHigh~t, col = "darkgrey", lty = 2, lwd = 1)
lines(data = confid.sim, nLow~t, col = "darkgrey", lty = 2, lwd = 1)
lines(data = confid.sim, BMean~t, col = "blue", lwd = 2)
lines(data = confid.sim, BHigh~t, col = "lightblue", lty = 2, lwd = 1)
lines(data = confid.sim, BLow~t, col = "lightblue", lty = 2, lwd = 1)
lines(data = confid.sim, EMean~t, col = "red", lwd = 2)
lines(data = confid.sim, EHigh~t, col = "pink", lty = 2, lwd = 1)
lines(data = confid.sim, ELow~t, col = "pink", lty = 2, lwd = 1)
par(new=T)
plot(data = confid.sim, MMean~t, type = "l", axes = F, xlab = NA, ylab = NA, col = "green", lwd = 2)
lines(data = confid.sim, MHigh~t, col = "limegreen", lty = 2, lwd = 1)
lines(data = confid.sim, MLow~t, col = "limegreen", lty = 2, lwd = 1)
axis(4)
mtext(text = "Mainland Richness", side=4, line=3)
# legend(x = "topleft", legend = c("Total, n", "Both, B", "Endemic, E", "Mainland, M"), text.col = c("black", "blue", "red", "green"))
for(i in 1:10){abline(h = 700 + i*50, lty = 2, col = "grey")}





#
